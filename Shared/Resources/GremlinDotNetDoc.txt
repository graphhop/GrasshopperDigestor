Gremlin.Net
gremlin dotnet logoApache TinkerPop’s Gremlin.Net implements Gremlin within the C# language. It targets .NET Standard and can therefore be used on different operating systems and with different .NET frameworks, such as .NET Framework and .NET Core. Since the C# syntax is very similar to that of Java, it should be easy to switch between Gremlin-Java and Gremlin.Net. The only major syntactical difference is that all method names in Gremlin.Net use PascalCase as opposed to camelCase in Gremlin-Java in order to comply with .NET conventions.

nuget install Gremlin.Net
Connecting
The pattern for connecting is described in Connecting Gremlin and it basically distills down to creating a GraphTraversalSource. A GraphTraversalSource is created from the AnonymousTraversalSource.traversal() method where the "g" provided to the DriverRemoteConnection corresponds to the name of a GraphTraversalSource on the remote end.

using var remoteConnection = new DriverRemoteConnection(new GremlinClient(new GremlinServer("localhost", 8182)), "g");
var g = Traversal().WithRemote(remoteConnection);
Some connection options can also be set on individual requests using the With() step on the TraversalSource. For instance to set request timeout to 500 milliseconds:

var l = g.With(Tokens.ArgsEvalTimeout, 500).V().Out("knows").Count().ToList();
The following options are allowed on a per-request basis in this fashion: batchSize, requestId, userAgent and evaluationTimeout (formerly scriptEvaluationTimeout which is also supported but now deprecated). These options are available as constants on the Gremlin.Net.Driver.Tokens class.

Common Imports
There are a number of classes, functions and tokens that are typically used with Gremlin. The following imports provide most of the typical functionality required to use Gremlin:

using static Gremlin.Net.Process.Traversal.AnonymousTraversalSource;
using static Gremlin.Net.Process.Traversal.__;
using static Gremlin.Net.Process.Traversal.P;
using static Gremlin.Net.Process.Traversal.Order;
using static Gremlin.Net.Process.Traversal.Operator;
using static Gremlin.Net.Process.Traversal.Pop;
using static Gremlin.Net.Process.Traversal.Scope;
using static Gremlin.Net.Process.Traversal.TextP;
using static Gremlin.Net.Process.Traversal.Column;
using static Gremlin.Net.Process.Traversal.Direction;
using static Gremlin.Net.Process.Traversal.Cardinality;
using static Gremlin.Net.Process.Traversal.CardinalityValue;
using static Gremlin.Net.Process.Traversal.T;
Configuration
The connection properties for the Gremlin.Net driver can be passed to the GremlinServer instance as keyword arguments:

Key	Description	Default
hostname

The hostname that the driver will connect to.

localhost

port

The port on which Gremlin Server can be reached.

8182

enableSsl

Determines if SSL should be enabled or not. If enabled on the server then it must be enabled on the client.

false

username

The username to submit on requests that require authentication.

none

password

The password to submit on requests that require authentication.

none

Connection Pool
It is also possible to configure the ConnectionPool of the Gremlin.Net driver. These configuration options can be set as properties on the ConnectionPoolSettings instance that can be passed to the GremlinClient:

Key	Description	Default
PoolSize

The size of the connection pool.

4

MaxInProcessPerConnection

The maximum number of in-flight requests that can occur on a connection.

32

ReconnectionAttempts

The number of attempts to get an open connection from the pool to submit a request.

4

ReconnectionBaseDelay

The base delay used for the exponential backoff for the reconnection attempts.

1 s

EnableUserAgentOnConnect

Enables sending a user agent to the server during connection requests. More details can be found in provider docs here.

true

A NoConnectionAvailableException is thrown if all connections have reached the MaxInProcessPerConnection limit when a new request comes in. A ServerUnavailableException is thrown if no connection is available to the server to submit a request after ReconnectionAttempts retries.

WebSocket Configuration
The WebSocket connections can also be configured, directly as parameters of the GremlinClient constructor. It takes an optional delegate webSocketConfiguration that will be invoked for each connection. This makes it possible to configure more advanced options like the KeepAliveInterval or client certificates.

Starting with .NET 6, it is also possible to use compression for WebSockets. This is enabled by default starting with TinkerPop 3.5.3 (again, only on .NET 6 or higher). Note that compression might make an application susceptible to attacks like CRIME/BREACH. Compression should therefore be turned off if the application sends sensitive data to the server as well as data that could potentially be controlled by an untrusted user. Compression can be disabled via the disableCompression parameter.

Logging
It is possible to enable logging for the Gremlin.Net driver by providing an ILoggerFactory (from the Microsoft.Extensions.Logging.Abstractions package) to the GremlinClient constructor:

var loggerFactory = LoggerFactory.Create(builder =>
{
    builder.AddConsole();
});
var client = new GremlinClient(new GremlinServer("localhost", 8182), loggerFactory: loggerFactory);
Serialization
The Gremlin.Net driver uses by default GraphBinary but it is also possible to use another serialization format by passing a message serializer when creating the GremlinClient.

GraphSON 3.0 can be configured like this:

var client = new GremlinClient(new GremlinServer("localhost", 8182), new GraphSON3MessageSerializer());
and GraphSON 2.0 like this:

var client = new GremlinClient(new GremlinServer("localhost", 8182), new GraphSON2MessageSerializer());
Traversal Strategies
In order to add and remove traversal strategies from a traversal source, Gremlin.Net has an AbstractTraversalStrategy class along with a collection of subclasses that mirror the standard Gremlin-Java strategies.

g = g.WithStrategies(new SubgraphStrategy(vertices: HasLabel("person"),
    edges: Has("weight", Gt(0.5))));
var names = g.V().Values<string>("name").ToList();  // names: [marko, vadas, josh, peter]

g = g.WithoutStrategies(typeof(SubgraphStrategy));
names = g.V().Values<string>("name").ToList(); // names: [marko, vadas, lop, josh, ripple, peter]

var edgeValueMaps = g.V().OutE().ValueMap<object, object>().With(WithOptions.Tokens).ToList();
// edgeValueMaps: [[label:created, id:9, weight:0.4], [label:knows, id:7, weight:0.5], [label:knows, id:8, weight:1.0],
//     [label:created, id:10, weight:1.0], [label:created, id:11, weight:0.4], [label:created, id:12, weight:0.2]]

g = g.WithComputer(workers: 2, vertices: Has("name", "marko"));
names = g.V().Values<string>("name").ToList();  // names: [marko]

edgeValueMaps = g.V().OutE().ValueMap<object, object>().With(WithOptions.Tokens).ToList();
// edgeValueMaps: [[label:created, id:9, weight:0.4], [label:knows, id:7, weight:0.5], [label:knows, id:8, weight:1.0]]
Note
Many of the TraversalStrategy classes in Gremlin.Net are proxies to the respective strategy on Apache TinkerPop’s JVM-based Gremlin traversal machine. As such, their Apply(ITraversal) method does nothing. However, the strategy is encoded in the Gremlin.Net bytecode and transmitted to the Gremlin traversal machine for re-construction machine-side.
Transactions
To get a full understanding of this section, it would be good to start by reading the Transactions section of this documentation, which discusses transactions in the general context of TinkerPop itself. This section builds on that content by demonstrating the transactional syntax for C#.

using var gremlinClient = new GremlinClient(new GremlinServer("localhost", 8182));
var g = Traversal().WithRemote(new DriverRemoteConnection(gremlinClient));
var tx = g.Tx();    // create a transaction

// spawn a new GraphTraversalSource binding all traversals established from it to tx
var gtx = tx.Begin();

// execute traversals using gtx occur within the scope of the transaction held by tx. the
// tx is closed after calls to CommitAsync or RollbackAsync and cannot be re-used. simply spawn a
// new Transaction from g.Tx() to create a new one as needed. the g context remains
// accessible through all this as a sessionless connection.
try
{
    await gtx.AddV("person").Property("name", "jorge").Promise(t => t.Iterate());
    await gtx.AddV("person").Property("name", "josh").Promise(t => t.Iterate());
    
    await tx.CommitAsync();
}
catch (Exception)
{
    await tx.RollbackAsync();
}
The Lambda Solution
Supporting anonymous functions across languages is difficult as most languages do not support lambda introspection and thus, code analysis. While Gremlin.Net doesn’t support C# lambdas, it is still able to represent lambdas in other languages. When the lambda is represented in Bytecode its language is encoded such that the remote connection host can infer which translator and ultimate execution engine to use.

g.V().Out().Map<int>(Lambda.Groovy("it.get().value('name').length()")).Sum<int>().ToList();      //1
g.V().Out().Map<int>(Lambda.Python("lambda x: len(x.get().value('name'))")).Sum<int>().ToList(); //2
Lambda.Groovy() can be used to create a Groovy lambda.

Lambda.Python() can be used to create a Python lambda.

The ILambda interface returned by these two methods inherits interfaces like IFunction and IPredicate that mirror their Java counterparts which makes it possible to use lambdas with Gremlin.Net for the same steps as in Gremlin-Java.

Tip
When running into situations where Groovy cannot properly discern a method signature based on the Lambda instance created, it will help to fully define the closure in the lambda expression - so rather than Lambda.Groovy("it.get().value('name')), prefer Lambda.Groovy("x → x.get().value('name')).
Submitting Scripts
Gremlin scripts are sent to the server from a IGremlinClient instance. A IGremlinClient is created as follows:

var gremlinServer = new GremlinServer("localhost", 8182);
using var gremlinClient = new GremlinClient(gremlinServer);

var response =
    await gremlinClient.SubmitWithSingleResultAsync<string>("g.V().has('person','name','marko')");
If the remote system has authentication and SSL enabled, then the GremlinServer object can be configured as follows:

var username = "username";
var password = "password";
var gremlinServer = new GremlinServer("localhost", 8182, true, username, password);
It is also possible to initialize the Client to use sessions:

var gremlinServer = new GremlinServer("localhost", 8182);
var client = new GremlinClient(gremlinServer, sessionId: Guid.NewGuid().ToString()))
Per Request Settings
The GremlinClient.Submit() functions accept an option to build a raw RequestMessage. A good use-case for this feature is to set a per-request override to the evaluationTimeout so that it only applies to the current request.

var gremlinServer = new GremlinServer("localhost", 8182);
using var gremlinClient = new GremlinClient(gremlinServer);

var response =
    await gremlinClient.SubmitWithSingleResultAsync<string>(
        RequestMessage.Build(Tokens.OpsEval).
            AddArgument(Tokens.ArgsGremlin, "g.V().count()").
            AddArgument(Tokens.ArgsEvalTimeout, 500).
            Create());
The following options are allowed on a per-request basis in this fashion: batchSize, requestId, userAgent, materializeProperties and evaluationTimeout (formerly scriptEvaluationTimeout which is also supported but now deprecated). These options are available as constants on the Gremlin.Net.Driver.Tokens class.

Important
The preferred method for setting a per-request timeout for scripts is demonstrated above, but those familiar with bytecode may try g.with(EVALUATION_TIMEOUT, 500) within a script. Scripts with multiple traversals and multiple timeouts will be interpreted as a sum of all timeouts identified in the script for that request.

Domain Specific Languages
Developing a Domain Specific Language (DSL) for .Net is most easily implemented using Extension Methods as they don’t require direct extension of classes in the TinkerPop hierarchy. Extension Method classes simply need to be constructed for the GraphTraversal and the GraphTraversalSource. Unfortunately, anonymous traversals (spawned from __) can’t use the Extension Method approach as they do not work for static classes and static classes can’t be extended. The only option is to re-implement the methods of __ as a wrapper in the anonymous traversal for the DSL or to simply create a static class for the DSL and use the two anonymous traversals creators independently. The following example uses the latter approach as it saves a lot of boilerplate code with the minor annoyance of having a second static class to deal with when writing traversals rather than just calling __ for everything.

namespace Dsl 
{
    public static class SocialTraversalExtensions
    {
        public static GraphTraversal<Vertex,Vertex> Knows(this GraphTraversal<Vertex,Vertex> t, string personName) 
        {
            return t.Out("knows").HasLabel("person").Has("name", personName);
        }

        public static GraphTraversal<Vertex, int> YoungestFriendsAge(this GraphTraversal<Vertex,Vertex> t) 
        {
            return t.Out("knows").HasLabel("person").Values<int>("age").Min<int>();
        }

        public static GraphTraversal<Vertex,long> CreatedAtLeast(this GraphTraversal<Vertex,Vertex> t, long number) 
        {
            return t.OutE("created").Count().Is(P.Gte(number));
        }
    }

    public static class __Social 
    {
        public static GraphTraversal<object,Vertex> Knows(string personName)
         {
            return __.Out("knows").HasLabel("person").Has("name", personName);
        }

        public static GraphTraversal<object, int> YoungestFriendsAge() 
        {
            return __.Out("knows").HasLabel("person").Values<int>("age").Min<int>();
        }

        public static GraphTraversal<object,long> CreatedAtLeast(long number) 
        {
            return __.OutE("created").Count().Is(P.Gte(number));
        }
    }

    public static class SocialTraversalSourceExtensions
    {
        public static GraphTraversal<Vertex,Vertex> Persons(this GraphTraversalSource g, params string[] personNames) 
        {
            GraphTraversal<Vertex,Vertex> t = g.V().HasLabel("person");

            if (personNames.Length > 0) 
            {    
                t = t.Has("name", P.Within(personNames));
            }

            return t;
        }
    }
}
Note the creation of __Social as the Social DSL’s "extension" to the available ways in which to spawn anonymous traversals. The use of the double underscore prefix in the name is just a convention to consider using and is not a requirement. To use the DSL, bring it into scope with the using directive:

using Dsl;
using static Dsl.__Social;
and then it can be called from the application as follows:

var connection = new DriverRemoteConnection(new GremlinClient(new GremlinServer("localhost", 8182)));
var social = Traversal().WithRemote(connection);

social.Persons("marko").Knows("josh");
social.Persons("marko").YoungestFriendsAge();
social.Persons().Filter(CreatedAtLeast(2)).Count();

Differences
The biggest difference between Gremlin in .NET and the canonical version in Java is the casing of steps. Canonical Gremlin utilizes camelCase as is typical in Java for function names, but C# utilizes PascalCase as it is more typical in that language. Therefore, when viewing a typical Gremlin example written in Gremlin Console, the conversion to C# usually just requires capitalization of the first letter in the step name, thus the following example in Groovy:

g.V().has('person','name','marko').
  out('knows').
  elementMap().toList()
would become the following in C#:

g.V().Has("Person","name","marko").
  Out("knows").
  ElementMap().ToList();
In addition to the uppercase change, also note the conversion of the single quotes to double quotes as is expected for declaring string values in C# and the addition of the semi-colon at the end of the line. In short, don’t forget to apply the common syntax expectations for C# when trying to convert an example of Gremlin from a different language.

Another common conversion issues lies in having to explicitly define generics, which can make canonical Gremlin appear much more complex in C# where type erasure is not a feature of the language. For example, the following example in Groovy:

g.V().repeat(__.out()).times(2).values('name')
must be written as:

g.V().Repeat(__.Out()).Times(2).Values<string>("name");
Gremlin allows for Map instances to include null keys, but null keys in C# Dictionary instances are not allowed. It is therefore necessary to rewrite a traversal such as:

g.V().GroupCount<object>().By("age")
where "age" is not a valid key for all vertices in a way that will remove the need for a null to be returned.

Finally, the enum construct for Cardinality cannot have functions attached to it the way it can be done in Java, therefore cardinality functions that take a value like list(), set(), and single() are referenced from a CardinalityValue class rather than Cardinality itself.

g.V().Has("age").GroupCount<object>().By("age")
g.V().HasLabel("person").GroupCount<object>().By("age")
Either of the above two options accomplishes the desired goal as both prevent groupCount() from having to process the possibility of null.


Limitations
The subgraph()-step is not supported by any variant that is not running on the Java Virtual Machine as there is no Graph instance to deserialize a result into on the client-side. A workaround is to replace the step with aggregate(local) and then convert those results to something the client can use locally.


Getting Started
This dotnet template helps getting started with Gremlin.Net. It creates a new C# console project that shows how to connect to a Gremlin Server with Gremlin.Net.

You can install the template with the dotnet CLI tool:

dotnet new -i Gremlin.Net.Template
After the template is installed, a new project based on this template can be installed:

dotnet new gremlin
Specify the output directory for the new project which will then also be used as the name of the created project:

dotnet new gremlin -o MyFirstGremlinProject
Application Examples
The TinkerPop source code contains some sample applications that demonstrate the basics of Gremlin-Dotnet. They can be found in GitHub here and are designed to connect to a running Gremlin Server configured with the conf/gremlin-server.yaml and conf/gremlin-server-modern.yaml files as included with the standard release packaging.

To run the examples, first download an image of Gremlin Server from Docker Hub:

docker pull tinkerpop/gremlin-server
The remote connection and basic Gremlin examples can be run on a clean server, which uses the default configuration file conf/gremlin-server.yaml. To start a clean server, launch a new container with docker run:

docker run -d -p 8182:8182 tinkerpop/gremlin-server
The traversal examples should be run on a server configured to start with the Modern toy graph, using conf/gremlin-server-modern.yaml. To start a server with the Modern graph preloaded, launch a new container with docker run:

docker run -d -p 8182:8182 tinkerpop/gremlin-server conf/gremlin-server-modern.yaml
Each example can now be run with the following command in their respective project directories:

dotnet run